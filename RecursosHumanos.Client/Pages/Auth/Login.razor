@page "/login"

@using RecursosHumanos.Client.Data.Forms;
@using RecursosHumanos.Client.Services.Auth;
@using RecursosHumanos.Client.Services.Common;
@using RecursosHumanos.Client.Services.EmisorService;
@using RecursosHumanos.Shared.Models;
@using RecursosHumanos.Shared.Requests;

@inject IEmisorService _emisorService;
@inject IAuthenticationService _authService;
@inject ISessionService _sessionService;

@inject DialogMsgService _dialogService;
@inject NavigationManager _navManager;

<EditForm Model="@_form" OnValidSubmit="@(async (e) => await OnValidSubmit())">
    <DataAnnotationsValidator />
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Login</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField Label="Usuario" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.VerifiedUser"
                          @bind-Value="_form.Usuario" For="@(() => _form.Usuario)" />
            <MudTextField Label="Contraseña" Class="mt-3" InputType="InputType.Password" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Key"
                          @bind-Value="_form.Password" For="@(() => _form.Password)" />
            <MudSelect T="int" Label="Emisor" @bind-Value="_form.CodigoEmisor" For="@(() => _form.CodigoEmisor)" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Home">
                <MudSelectItem Value="0">--Seleccione Un Objeto--</MudSelectItem>
                @foreach (var emisor in _emisores)
                {
                    <MudSelectItem Value="emisor.Codigo" >@emisor.Codigo - @emisor.Nombre</MudSelectItem>
                }
            </MudSelect>
        </MudCardContent>
        <MudCardActions>
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="m-auto">Login</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private LoginForm _form = new();
    private List<Emisor> _emisores = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _emisores = await _emisorService.GetAll();
    }

    private async Task OnValidSubmit()
    {
        try
        {
            LoginRequest request = new(_form.Usuario, _form.Password, _form.CodigoEmisor);
            var usuario = await _authService.Login(request);
            _form = new();
            _navManager.NavigateTo("/");
        }
        catch(Exception e)
        {
            await _dialogService.ShowDialogAsync(e.Message, true);
            await _sessionService.RemoveJwtToken();
        }
    }
}
