@page "/movimientoPlanilla"

@using RecursosHumanos.Client.Components.Dialogs;
@using RecursosHumanos.Client.Services.Common;
@using RecursosHumanos.Client.Services.MovimientoPlanillaService;
@using RecursosHumanos.Shared.Models;
@using RecursosHumanos.Shared.Requests;

@inject NavigationManager _navManager;
@inject DialogMsgService _dialogService;
@inject IMovimientoPlanillaService _service;

<MudTable Items="@_items" Filter="@((element) => Filter(element, _searchString))" Dense>
    <ToolBarContent>
        <MudText Typo="Typo.h6">Movimiento Planilla</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Codigo</MudTh>
        <MudTh>Concepto</MudTh>
        <MudTh>Proridad</MudTh>
        <MudTh>IESS</MudTh>
        <MudTh>Imp. Renta</MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.CodigoConcepto</MudTd>
        <MudTd>@context.Concepto</MudTd>
        <MudTd>@context.Prioridad</MudTd>
        <MudTd>@context.AplicaIESS</MudTd>
        <MudTd>@context.AplicaImpRenta</MudTd>
        <MudTd>
            <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" OnClick="@(() => Editar(@context))" />
        </MudTd>
        <MudTd>
            <MudFab Color="Color.Secondary" StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" OnClick="@(() => Borrar(@context))" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Filas" />
    </PagerContent>
</MudTable>
<MudFab Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" Label="Nuevo" Style="margin-top:1em;" OnClick="@Nuevo" class="mb-5"/>


@code {
    private List<MovimientoPlanilla> _items = new();
    private string _searchString = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (!firstRender)
            return;

        await Cargar();
    }

    private async Task Cargar()
    {
        try
        {
            _items = await _service.GetAll();
            StateHasChanged();
        }
        catch (Exception e)
        {
            await _dialogService.ShowDialogAsync(e.Message, true);
        }
    }

    private bool Filter(MovimientoPlanilla movimiento, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (movimiento.CodigoConcepto.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (movimiento.Concepto.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (movimiento.Prioridad.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    private void Editar(MovimientoPlanilla item)
    {
        _navManager.NavigateTo($"movimientoPlanilla/{item.CodigoConcepto}");
    }

    private async void Borrar(MovimientoPlanilla item)
    {
        try
        {
            DeleteMovimientoPlanillaRequest request = new(item.CodigoConcepto, item.Concepto);

            await _service.Delete(request);
            await _dialogService.ShowDialogAsync($"Eliminado {item.Concepto}", true);
            await Cargar();
        }
        catch (Exception e)
        {
            await _dialogService.ShowDialogAsync(e.Message);
        }
    }

    private void Nuevo()
    {
        _navManager.NavigateTo($"movimientoPlanilla/{0}");
    }
}
